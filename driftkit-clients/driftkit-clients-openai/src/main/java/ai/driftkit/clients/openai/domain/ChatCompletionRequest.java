package ai.driftkit.clients.openai.domain;

import ai.driftkit.common.domain.client.ModelClient.Tool;
import ai.driftkit.clients.openai.utils.OpenAIUtils;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.stream.Collectors;

@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
@JsonInclude(JsonInclude.Include.NON_NULL)  // Exclude null fields for cleaner serialization
public class ChatCompletionRequest {

    @JsonProperty("model")
    private String model;

    @JsonProperty("messages")
    private List<Message> messages;

    /*
    What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random,
    while lower values like 0.2 will make it more focused and deterministic.
    We generally recommend altering this or top_p but not both.
     */
    @JsonProperty("temperature")
    private Double temperature;

    /*
    An alternative to sampling with temperature, called nucleus sampling,
    where the model considers the results of the tokens with top_p probability mass.
    So 0.1 means only the tokens comprising the top 10% probability mass are considered.
    We generally recommend altering this or temperature but not both.
     */
    @JsonProperty("top_p")
    private Double topP;

    // How many chat completion choices to generate for each input message.
    // Note that you will be charged based on the number of generated tokens across all of the choices. Keep n as 1 to minimize costs.
    @JsonProperty("n")
    private Integer n = 1;

    @JsonProperty("stream")
    private Boolean stream;

    //Up to 4 sequences where the API will stop generating further tokens.
    @JsonProperty("stop")
    private List<String> stop;

    @JsonProperty("max_tokens")
    private Integer maxTokens;

    @JsonProperty("max_completion_tokens")
    private Integer maxCompletionTokens;

    //medium,hard
    @JsonProperty("reasoning_effort")
    private String reasoningEffort;

    /*
    Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far,
    increasing the model's likelihood to talk about new topics.
     */
    @JsonProperty("presence_penalty")
    private Double presencePenalty;

    /*
    Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far,
    decreasing the model's likelihood to repeat the same line verbatim.
     */
    @JsonProperty("frequency_penalty")
    private Double frequencyPenalty;

    /*
    Accepts a JSON object that maps tokens (specified by their token ID in the tokenizer)
    to an associated bias value from -100 to 100. Mathematically, the bias is added to the
    logits generated by the model prior to sampling. The exact effect will vary per model,
    but values between -1 and 1 should decrease or increase likelihood of selection;
    values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
     */
    @JsonProperty("logit_bias")
    private Map<String, Integer> logitBias;

    @JsonProperty("user")
    private String user;

    /*
    Whether or not to store the output of this chat completion request for use in our model distillation or evals products.
     */
    @JsonProperty("store")
    private Boolean store;

    @JsonProperty("metadata")
    private Map<String, Object> metadata;

    /*
    Whether to return log probabilities of the output tokens or not.
    If true, returns the log probabilities of each output token returned in the content of message.
     */
    @JsonProperty("logprobs")
    private Boolean logprobs;

    /*
    An integer between 0 and 20 specifying the number of most likely tokens to return at each token position,
    each with an associated log probability. logprobs must be set to true if this parameter is used.
     */
    @JsonProperty("top_logprobs")
    private Integer topLogprobs;

    /*
    Output types that you would like the model to generate for this request.
    Most models are capable of generating text, which is the default:

    ["text"]

    The gpt-4o-audio-preview model can also be used to generate audio.
    To request that this model generate both text and audio responses, you can use:

    ["text", "audio"]
     */
    @JsonProperty("modalities")
    private List<String> modalities;

    /*
    Configuration for a Predicted Output, which can greatly improve response times
    when large parts of the model response are known ahead of time. This is most
    common when you are regenerating a file with only minor changes to most of the content.
     */
    @JsonProperty("prediction")
    private PredictionItem prediction;

    @JsonProperty("audio")
    private Map<String, Object> audio;

    /*
    Setting to { "type": "json_schema", "json_schema": {...} } enables Structured Outputs which ensures the model
    will match your supplied JSON schema. Learn more in the Structured Outputs guide.

    Setting to { "type": "json_object" } enables JSON mode, which ensures the message the model generates is valid JSON.

    Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message.
    Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit,
    resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut
    off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
     */
    @JsonProperty("response_format")
    private ResponseFormat responseFormat;

    /*
    This feature is in Beta. If specified, our system will make a best effort to sample deterministically,
    such that repeated requests with the same seed and parameters should return the same result.
    Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.
     */
    @JsonProperty("seed")
    private Integer seed;

    /*
    Specifies the latency tier to use for processing the request.
    This parameter is relevant for customers subscribed to the scale tier service:

    If set to 'auto', and the Project is Scale tier enabled, the system will utilize scale tier credits until they are exhausted.
    If set to 'auto', and the Project is not Scale tier enabled,
    the request will be processed using the default service tier with a lower uptime SLA and no latency guarentee.
    If set to 'default', the request will be processed using the default service tier with a lower uptime SLA and no latency guarentee.
    When not set, the default behavior is 'auto'.
    When this parameter is set, the response body will include the service_tier utilized.
     */
    @JsonProperty("service_tier")
    private String serviceTier;

    @JsonProperty("stream_options")
    private Map<String, Object> streamOptions;

    /*
    A list of tools the model may call. Currently, only functions are supported as a tool.
    Use this to provide a list of functions the model may generate JSON inputs for.
    A max of 128 functions are supported.
     */
    @JsonProperty("tools")
    private List<Tool> tools;

    /*
    Controls which (if any) tool is called by the model.
    none means the model will not call any tool and instead generates a message.
    auto means the model can pick between generating a message or calling one or more tools.
    required means the model must call one or more tools.
    Specifying a particular tool via {"type": "function", "function": {"name": "my_function"}} forces the model to call that tool.
    none is the default when no tools are present. auto is the default if tools are present.
     */
    @JsonProperty("tool_choice")
    private String toolChoice;

    @Data
    @NoArgsConstructor
    @AllArgsConstructor
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public static class ContentMessage extends Message {
        private List<ContentElement> content;

        @Builder
        public ContentMessage(String role, String name, List<ContentElement> content) {
            super(role, name);
            this.content = content;
        }

        @Override
        public String getMessage() {
            return content.stream().map(e -> {
                if (e.getType() == MessageType.text) {
                    return ((TextContentElement)e).getText();
                }

                return null;
            })
            .filter(Objects::nonNull)
            .collect(Collectors.joining(" "));
        }
    }

    @Data
    @NoArgsConstructor
    @AllArgsConstructor
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public static class StringMessage extends Message {
        private String content;

        @Builder
        public StringMessage(String role, String name, String content) {
            super(role, name);
            this.content = content;
        }

        public String getMessage() {
            return content;
        }
    }

    @Data
    @NoArgsConstructor
    @AllArgsConstructor
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public static abstract class Message {
        private String role;

        @JsonProperty("name")
        private String name;

        @JsonIgnore
        public abstract String getMessage();

        @Data
        @NoArgsConstructor
        @AllArgsConstructor
        @JsonInclude(JsonInclude.Include.NON_NULL)
        public static class ContentElement {
            private MessageType type;
        }

        @Data
        @NoArgsConstructor
        @JsonInclude(JsonInclude.Include.NON_NULL)
        public static class TextContentElement extends ContentElement {
            private String text;

            public TextContentElement(String text) {
                super(MessageType.text);
                this.text = text;
            }
        }

        @Data
        @NoArgsConstructor
        @JsonInclude(JsonInclude.Include.NON_NULL)
        public static class ImageUrlContentElement extends ContentElement {
            @JsonProperty("image_url")
            private ImageStringUrl imageUrl;

            public ImageUrlContentElement(String url) {
                super(MessageType.image_url);
                this.imageUrl = new ImageStringUrl(url);
            }

            @Data
            @NoArgsConstructor
            @AllArgsConstructor
            public static class ImageStringUrl {
                @JsonProperty("url")
                private String url;
            }
        }

        @Data
        @NoArgsConstructor
        @JsonInclude(JsonInclude.Include.NON_NULL)
        public static class ImageContentElement extends ContentElement {
            @JsonProperty("image_url")
            private ImageContent imageUrl;

            public ImageContentElement(byte[] image) {
                super(MessageType.image_url);
                this.imageUrl = new ImageContent(image);
            }

            @Data
            @NoArgsConstructor
            @AllArgsConstructor
            @JsonInclude(JsonInclude.Include.NON_NULL)
            public static class ImageContent {
                private String url;

                public ImageContent(byte[] img) {
                    this.url = OpenAIUtils.imageToBase64(img);
                }
            }
        }
    }

    @Data
    @NoArgsConstructor
    @AllArgsConstructor
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public static class ResponseFormat {
        @JsonProperty("type")
        private String type;

        @JsonProperty("json_schema")
        private JsonSchema jsonSchema;

        @Data
        @NoArgsConstructor
        @AllArgsConstructor
        public static class JsonSchema {
            @JsonProperty("name")
            private String name;

            @JsonProperty("strict")
            private Boolean strict;

            @JsonProperty("schema")
            private SchemaDefinition schema;

            public JsonSchema(String name, SchemaDefinition schema) {
                this.name = name;
                this.strict = true;
                this.schema = schema;
            }
        }

        @Data
        @NoArgsConstructor
        @AllArgsConstructor
        public static class SchemaDefinition {
            @JsonProperty("type")
            private String type;

            @JsonProperty("properties")
            private Map<String, Property> properties;

            @JsonProperty("required")
            private List<String> required;

            @JsonProperty("additionalProperties")
            private Boolean additionalProperties;

            public SchemaDefinition(String type, Map<String, Property> properties, List<String> required) {
                this.type = type;
                this.properties = properties;
                this.required = required;
                this.additionalProperties = false;
            }
        }

        @Data
        @NoArgsConstructor
        @AllArgsConstructor
        @JsonInclude(JsonInclude.Include.NON_NULL)
        public static class Property {
            @JsonProperty("type")
            private String type;

            @JsonProperty("description")
            private String description;

            @JsonProperty("enum")
            private List<String> enumValues;

            @JsonProperty("properties")
            private Map<String, Property> properties;

            @JsonProperty("required")
            private List<String> required;

            @JsonProperty("items")
            private Property items;

            @JsonProperty("additionalProperties")
            private Object additionalProperties;

            public Property(String type, String description, List<String> enumValues) {
                this.type = type;
                this.description = description;
                this.enumValues = enumValues;
            }
        }
    }

    @Data
    @NoArgsConstructor
    @AllArgsConstructor
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public static class PredictionContentItem {
        private String type;

        private String text;
    }

    @Data
    @NoArgsConstructor
    @AllArgsConstructor
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public static class PredictionItem {
        //Always content
        private String type;
    }

    @Data
    @NoArgsConstructor
    @AllArgsConstructor
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public static class PredictionItemSingle extends PredictionItem {
        private PredictionContentItem content;
    }

    @Data
    @NoArgsConstructor
    @AllArgsConstructor
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public static class PredictionItems extends PredictionItem {
        private List<PredictionContentItem> content;
    }

    public enum MessageType {
        image_url,
        text
    }
}