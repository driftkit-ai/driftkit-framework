package ai.driftkit.common.domain.client;

import ai.driftkit.common.utils.ModelUtils;
import ai.driftkit.config.EtlConfig.VaultConfig;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonValue;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.apache.commons.collections4.CollectionUtils;

import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Set;

@Data
@NoArgsConstructor
@AllArgsConstructor
public abstract class ModelClient<T> {

    private T workflow;
    private String model;

    private List<String> systemMessages;

    /*
    What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random,
    while lower values like 0.2 will make it more focused and deterministic.
    We generally recommend altering this or top_p but not both.
     */
    private Double temperature = 0.2;

    /*
    An alternative to sampling with temperature, called nucleus sampling,
    where the model considers the results of the tokens with top_p probability mass.
    So 0.1 means only the tokens comprising the top 10% probability mass are considered.
    We generally recommend altering this or temperature but not both.
     */
    private Double topP;

    //Up to 4 sequences where the API will stop generating further tokens.
    private List<String> stop;

    protected boolean jsonObjectSupport = true;
    
    // Whether to enable log probabilities for token generation
    private Boolean logprobs = false;
    
    // Number of most likely tokens to return at each step (1-20)
    private Integer topLogprobs = 2;

    private Integer maxTokens;

    private Integer maxCompletionTokens;

    /*
    Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far,
    increasing the model's likelihood to talk about new topics.
     */
    private Double presencePenalty;

    /*
    Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far,
    decreasing the model's likelihood to repeat the same line verbatim.
     */
    private Double frequencyPenalty;

    /*
    Accepts a JSON object that maps tokens (specified by their token ID in the tokenizer)
    to an associated bias value from -100 to 100. Mathematically, the bias is added to the
    logits generated by the model prior to sampling. The exact effect will vary per model,
    but values between -1 and 1 should decrease or increase likelihood of selection;
    values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
     */
    private Map<String, Integer> logitBias;

    /*
    This feature is in Beta. If specified, our system will make a best effort to sample deterministically,
    such that repeated requests with the same seed and parameters should return the same result.
    Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor changes in the backend.
     */
    private Integer seed;

    /*
    A list of tools the model may call. Currently, only functions are supported as a tool.
    Use this to provide a list of functions the model may generate JSON inputs for.
    A max of 128 functions are supported.
     */
    private List<Tool> tools;

    public ModelClient(
            String model,
            List<String> systemMessages,
            Double temperature,
            Double topP,
            List<String> stop,
            Integer maxTokens,
            Integer maxCompletionTokens,
            Double presencePenalty,
            Double frequencyPenalty,
            Map<String, Integer> logitBias,
            Integer seed,
            List<Method> functions,
            List<Tool> tools,
            boolean jsonObjectSupport,
            Boolean logprobs,
            Integer topLogprobs,
            T workflow
    ) {
        this.model = model;
        this.systemMessages = systemMessages;
        this.temperature = temperature;
        this.topP = topP;
        this.stop = stop;
        this.maxTokens = maxTokens;
        this.maxCompletionTokens = maxCompletionTokens;
        this.presencePenalty = presencePenalty;
        this.frequencyPenalty = frequencyPenalty;
        this.logitBias = logitBias;
        this.seed = seed;
        this.workflow = workflow;
        this.jsonObjectSupport = jsonObjectSupport;
        this.logprobs = logprobs;
        this.topLogprobs = topLogprobs;
        this.tools = tools == null ? new ArrayList<>() : tools;

        if (CollectionUtils.isNotEmpty(functions)) {
            this.tools.addAll(
                functions.stream()
                    .map(ModelUtils::parseFunction)
                    .toList()
            );
        }
    }

    public abstract Set<Capability> getCapabilities();

    public ModelTextResponse textToText(ModelTextRequest prompt) throws UnsupportedCapabilityException {
        checkCapability(Capability.TEXT_TO_TEXT);
        return null;
    }

    public ModelImageResponse textToImage(ModelImageRequest prompt) throws UnsupportedCapabilityException {
        checkCapability(Capability.TEXT_TO_IMAGE);
        return null;
    }

    public ModelTextResponse imageToText(ModelTextRequest image) throws UnsupportedCapabilityException {
        checkCapability(Capability.IMAGE_TO_TEXT);
        return null;
    }

    private void checkCapability(Capability capability) throws UnsupportedCapabilityException {
        if (!getCapabilities().contains(capability)) {
            throw new UnsupportedCapabilityException("Capability [%s] is not supported".formatted(capability));
        }
    }

    public static class UnsupportedCapabilityException extends RuntimeException {
        public UnsupportedCapabilityException(String message) {
            super(message);
        }
    }

    @Data
    @Builder
    @NoArgsConstructor
    @AllArgsConstructor
    public static class Tool {
        @JsonProperty("type")
        private ResponseFormatType type;

        @JsonProperty("function")
        private ToolFunction function;
    }

    @Data
    @Builder
    @NoArgsConstructor
    @AllArgsConstructor
    public static class ToolFunction {
        @JsonProperty("name")
        private String name;

        @JsonProperty("description")
        private String description;

        @JsonProperty("parameters")
        private FunctionParameters parameters;

        @Data
        @NoArgsConstructor
        @AllArgsConstructor
        public static class FunctionParameters {
            @JsonProperty("type")
            private ResponseFormatType type;

            @JsonProperty("properties")
            private Map<String, Property> properties;

            @JsonProperty("required")
            private List<String> required;
        }
    }

    @Data
    @NoArgsConstructor
    @AllArgsConstructor
    public static class Property {
        @JsonProperty("type")
        private ResponseFormatType type;

        @JsonProperty("description")
        private String description;

        @JsonProperty("enum")
        private List<String> enumValues;
        
        @JsonProperty("properties")
        private Map<String, Property> properties;
        
        @JsonProperty("required")
        private List<String> required;
        
        @JsonProperty("items")
        private Property items;

        public Property(ResponseFormatType type) {
            this.type = type;
        }
    }

    public enum ResponseFormatType {
        String("string"),
        Number("number"),
        Boolean("boolean"),
        Integer("integer"),
        Object("object"),
        Array("array"),
        Enum("enum"),
        anyOf("anyOf"),
        function("function");

        private String type;

        ResponseFormatType(String type) {
            this.type = type;
        }

        @JsonValue
        public String getType() {
            return type;
        }

        @JsonCreator
        public static ResponseFormatType fromType(String type) {
            for (ResponseFormatType formatType : ResponseFormatType.values()) {
                if (formatType.type.equals(type)) {
                    return formatType;
                }
            }
            throw new IllegalArgumentException("Unknown type: " + type);
        }
    }

    public interface ModelClientInit {
        ModelClient init(VaultConfig config);
    }

    public enum Capability {
        TEXT_TO_TEXT,
        TEXT_TO_IMAGE,
        IMAGE_TO_TEXT,
        FUNCTION_CALLING,
        JSON_SCHEMA,
        JSON_OBJECT,
        TOOLS;
    }
}
